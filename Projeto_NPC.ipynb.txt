{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMgakYn64GRWF3csBmyYBdM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AshSlake/NPC-Studio-Com-IA-Gemini/blob/main/Projeto_NPC.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NPC-STUDIO**\n"
      ],
      "metadata": {
        "id": "OFKbiwGO8CG0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q -U google-generativeai\n",
        "!pip install markdown"
      ],
      "metadata": {
        "id": "jkJn-3ui8QOs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26b868b7-0272-4912-e4bf-4210aba3cc7a"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: markdown in /usr/local/lib/python3.10/dist-packages (3.6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the Python SDK\n",
        "import google.generativeai as npc_g\n",
        "from google.colab import userdata\n",
        "api_key=userdata.get('KEY')\n",
        "npc_g.configure(api_key=api_key)"
      ],
      "metadata": {
        "id": "677IQmh5-Snn"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "configuracao_de_geracao = {\n",
        "    \"candidate_count\": 1,\n",
        "    \"temperature\": 0.5,\n",
        "}"
      ],
      "metadata": {
        "id": "EgPM5uJc3p-h"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "safety_settings={\n",
        "    'HATE' : 'BLOCK_NONE',\n",
        "    'HARASSMENT' : 'BLOCK_NONE',\n",
        "    'SEXUAL' : 'BLOCK_NONE',\n",
        "    'DANGEROUS' : 'BLOCK_NONE'\n",
        "}"
      ],
      "metadata": {
        "id": "Dwr4P8k8T5ZP"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Vamos inicializar o modelo**"
      ],
      "metadata": {
        "id": "eSwcGzDRpl30"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = npc_g.GenerativeModel(model_name=\"gemini-1.0-pro-latest\",\n",
        "                              generation_config=configuracao_de_geracao,\n",
        "                              safety_settings=safety_settings,)"
      ],
      "metadata": {
        "id": "j26Aub-wp4OZ"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Agora vamos comecara a desenvolver seu npc**"
      ],
      "metadata": {
        "id": "JjyeIU-IQNwi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import markdown\n",
        "import os  # --> Importe o módulo 'os' para trabalhar com diretórios\n",
        "\n",
        "def gerar_npc():\n",
        "    \"\"\"Coleta informações do usuário e gera uma ficha de NPC.\"\"\"\n",
        "\n",
        "    # Coleta informações básicas\n",
        "    print(\"Escolha o sexo do NPC:\")  # --> Apresenta as opções de sexo\n",
        "    print(\"1. Masculino\")\n",
        "    print(\"2. Feminino\")\n",
        "    print(\"3. Não binário\")\n",
        "    print(\"4. Outro\")\n",
        "\n",
        "    while True: # --> Loop para garantir uma escolha válida\n",
        "        try:\n",
        "            opcao_sexo = int(input(\"Digite o número da opção desejada: \"))  # --> Recebe a escolha do usuário\n",
        "            if 1 <= opcao_sexo <= 4:\n",
        "                break\n",
        "            else:\n",
        "                print(\"Opção inválida. Digite um número entre 1 e 4.\")\n",
        "        except ValueError:\n",
        "            print(\"Entrada inválida. Digite um número.\")\n",
        "\n",
        "    sexo = {  # --> Dicionário para traduzir a escolha em string\n",
        "        1: \"masculino\",\n",
        "        2: \"feminino\",\n",
        "        3: \"não binário\",\n",
        "        4: \"outro\"\n",
        "    }[opcao_sexo]\n",
        "\n",
        "    while True:  # --> Loop para garantir uma idade válida (número)\n",
        "        try:\n",
        "            idade = int(input(\"Idade do NPC (digite um número): \"))\n",
        "            idade = str(idade) # --> Converte para string para usar na ficha\n",
        "            break\n",
        "        except ValueError:\n",
        "            print(\"Entrada inválida. Digite apenas números para a idade.\")\n",
        "\n",
        "    nome = input(\"Nome do NPC: \")\n",
        "    habilidade = input(\"Habilidade especial? (sim/não): \")\n",
        "\n",
        "    # Gera informações ausentes\n",
        "    if not nome:\n",
        "        prompt = f\"Sugira um nome {sexo.lower()}.\"\n",
        "        response = model.generate_content(prompt)\n",
        "        nomes_sugeridos = response.text.split(\"\\n\")\n",
        "        nome = random.choice(nomes_sugeridos)\n",
        "    if habilidade.lower() != \"sim\":\n",
        "        habilidade = \"Não possui habilidades especiais\"\n",
        "    else:\n",
        "        habilidade = input(f\"Qual é a habilidade de {nome.lower()}? \")\n",
        "\n",
        "    # Informações adicionais (opcional)\n",
        "    adicionar_mais = input(\"Adicionar mais informações? (sim/não): \")\n",
        "    informacoes_adicionais = input(\"Digite as informações adicionais: \") if adicionar_mais.lower() == \"sim\" else \"\"\n",
        "\n",
        "    # Momento marcante (opcional)\n",
        "    momento_marcante = \"\"\n",
        "    if adicionar_mais.lower() != \"sim\":\n",
        "        quer_momento_marcante = input(\"Deseja gerar um momento marcante para o NPC? (sim/não): \")  # --> Pergunta ao usuário\n",
        "        if quer_momento_marcante.lower() == \"sim\":\n",
        "            prompt = f\"Crie um momento marcante na vida de {nome.lower()}.\"\n",
        "            response = model.generate_content(prompt)\n",
        "            momento_marcante = response.text\n",
        "\n",
        "    # Tipo de RPG\n",
        "    tipo_rpg = input(\"Tipo de RPG (fantasia/sci-fi/moderno/outro): \")\n",
        "\n",
        "    # Gera descrição e história\n",
        "    descricao_npc = f\"{nome} tem {idade} anos e possui a habilidade de {habilidade}.\"\n",
        "    prompt_historia = f\"Escreva um breve resumo da história de {nome}, um(a) {sexo} de {idade} anos com a habilidade de {habilidade}, em um mundo de {tipo_rpg}. Limite a resposta a no máximo 100 tokens.\"\n",
        "    response = model.generate_content(prompt_historia)\n",
        "    resumo_historia = response.text\n",
        "\n",
        "    # Chama a função para gerar a ficha em Markdown\n",
        "    ficha_markdown = gerar_ficha_markdown(nome, sexo, idade, habilidade,\n",
        "                                       informacoes_adicionais, momento_marcante,\n",
        "                                       descricao_npc, resumo_historia)\n",
        "\n",
        "    # Converte a ficha Markdown para HTML\n",
        "    ficha_html = markdown.markdown(ficha_markdown)\n",
        "\n",
        "    # Imprime o nome do NPC em vermelho e a ficha HTML\n",
        "\n",
        "    print(\"\\033[1m\" + \"FICHA DO NPC\".center(40, '=') + \"\\033[0m\") # Título em negrito\n",
        "    print(f\"Nome: \\033[92m{nome}\\033[0m\")  # Nome em verde\n",
        "    print(f\"Sexo: {sexo}\")\n",
        "    print(f\"Idade: {idade} anos\")\n",
        "    print(f\"Habilidade: {habilidade}\")\n",
        "    if informacoes_adicionais:\n",
        "     print(f\"Informações Adicionais: {informacoes_adicionais}\")\n",
        "    print(f\"Momento Marcante: {momento_marcante}\")\n",
        "    print(f\"Descrição: {descricao_npc}\")\n",
        "    print(f\"História: {resumo_historia}\\n\")\n",
        "\n",
        "    print(\"-------------\")\n",
        "    print(\"-------------\")\n",
        "\n",
        "    # Pergunta ao usuário se deseja salvar a ficha\n",
        "    salvar_ficha = input(\"Deseja salvar a ficha do NPC? (sim/não): \")\n",
        "    if salvar_ficha.lower() == \"sim\":\n",
        "        nome_arquivo_sugerido = f\"{nome.upper()}_FICHA.md\"  # Sugere um nome de arquivo\n",
        "        nome_arquivo = input(f\"Digite o nome do arquivo (sugestão: {nome_arquivo_sugerido}): \")\n",
        "\n",
        "        # Cria o subdiretório 'fichas' se ele não existir\n",
        "        os.makedirs(\"fichas\", exist_ok=True)\n",
        "\n",
        "        # Salva a ficha em um arquivo .md no subdiretório 'fichas'\n",
        "        caminho_arquivo = os.path.join(\"fichas\", nome_arquivo)\n",
        "        with open(caminho_arquivo, \"w\") as arquivo_md:\n",
        "            arquivo_md.write(ficha_markdown)\n",
        "        print(f\"Ficha salva como: {caminho_arquivo}\")\n",
        "\n",
        "    # Converte a ficha Markdown para HTML\n",
        "    ficha_html = markdown.markdown(ficha_markdown)\n",
        "\n",
        "    print(\"-------------\")\n",
        "    print(\"-------------\")\n",
        "\n",
        "    print(\"html para usar  no StackEdit\")\n",
        "    print(ficha_html)\n",
        "\n",
        "def gerar_ficha_markdown(nome, sexo, idade, habilidade, informacoes_adicionais, momento_marcante, descricao_npc, resumo_historia):\n",
        "    \"\"\"Gera uma string com a ficha do NPC em formato Markdown.\"\"\"\n",
        "    ficha_markdown = f\"\"\"\n",
        "---\n",
        "# Ficha do NPC\n",
        "\n",
        "**Nome:** {nome}\n",
        "**Sexo:** {sexo}\n",
        "**Idade:** {idade} anos\n",
        "**Habilidade:** {habilidade}\n",
        "\n",
        "\"\"\"\n",
        "    if informacoes_adicionais:\n",
        "        ficha_markdown += f\"**Informações Adicionais:** {informacoes_adicionais}\\n\\n\"\n",
        "    ficha_markdown += f\"\"\"\n",
        "**Momento Marcante:** {momento_marcante}\n",
        "\n",
        "**Descrição:** {descricao_npc}\n",
        "\n",
        "**História:** {resumo_historia}\n",
        "---\n",
        "\"\"\"\n",
        "    return ficha_markdown  # --> Indentação correta aqui\n",
        "\n",
        "gerar_npc()\n",
        "\n"
      ],
      "metadata": {
        "id": "mAA5OQlih8GV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}